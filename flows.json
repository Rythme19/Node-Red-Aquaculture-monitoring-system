[
    {
        "id": "4011939e64afe1b1",
        "type": "tab",
        "label": "Flux 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7bf9ead0e521452d",
        "type": "mqtt-broker",
        "name": "Mosquito",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "3",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e6a61ad9a248f9f5",
        "type": "mongodb3",
        "uri": "mongodb://localhost:27017/fermeaquacole",
        "name": "",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "2c7e66e3626e7eef",
        "type": "ui_group",
        "name": "Date and Time",
        "tab": "29a5a894f9cc47ae",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "52e872bd94fc4158",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "45b63fcf221b1a5c",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "fd063ac6698cc46f",
        "type": "ui_group",
        "name": "Function",
        "tab": "57b25a3394207315",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "57b25a3394207315",
        "type": "ui_tab",
        "name": "Realtime",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "29a5a894f9cc47ae",
        "type": "ui_tab",
        "name": "Date and Time",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "957588672db18d99",
        "type": "mqtt-broker",
        "name": "m2m.eclipse.org",
        "broker": "198.41.30.254",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "3",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "92b2802d2c4cd65b",
        "type": "mqtt-broker",
        "name": "test.mosquitto.org",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c71771c6b6ce37e4",
        "type": "node-red-contrib-whatsapp-cmb-account",
        "name": "Aquaculture Farm"
    },
    {
        "id": "94751b73ffff5214",
        "type": "websocket-listener",
        "path": "/ws/api/node-red",
        "wholemsg": "false"
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "My MQTT Broker",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "e8604a41.8f9cb",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "mqtt-broker-id",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "your.mqtt.broker",
        "port": "1883",
        "clientid": "node-red",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "4fd49fde243e9b5a",
        "type": "mongodb",
        "name": "MongoDB Server"
    },
    {
        "id": "mqtt-broker-example",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "your.mqtt.broker",
        "port": "1883",
        "clientid": "node-red-example",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "mqtt-broker-practical",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "your.mqtt.broker",
        "port": "1883",
        "clientid": "node-red-practical",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "mongodb-server-practical",
        "type": "mongodb",
        "name": "MongoDB Server"
    },
    {
        "id": "d40d8f5e37ea5164",
        "type": "mqtt in",
        "z": "4011939e64afe1b1",
        "name": "",
        "topic": "aquafarm/stats",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "92b2802d2c4cd65b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 340,
        "wires": [
            [
                "cdbaba12567d5cbc",
                "ee9343f05b8994ea",
                "c03f23d3a3247e6f"
            ]
        ]
    },
    {
        "id": "9ed4077df27a955d",
        "type": "mongodb3 in",
        "z": "4011939e64afe1b1",
        "service": "_ext_",
        "configNode": "e6a61ad9a248f9f5",
        "name": "Database In",
        "collection": "sensordatas",
        "operation": "insertOne",
        "x": 970,
        "y": 200,
        "wires": [
            [
                "f3cf11fb9c5f9e72"
            ]
        ]
    },
    {
        "id": "02ba41a51c5326f9",
        "type": "function",
        "z": "4011939e64afe1b1",
        "name": "json msg exemple",
        "func": "\n\nmsg.payload = {\n    \"time\": 1716840432,\n    \"temperature\": 20.5,\n    \"pressure\": 112584\n}\n/*\n{\n    \"date\": \"2024-06-02\",\n    \"time\": \"22:41:21\",\n    \"temperature\": 20.5,\n    \"pressure\": 112584\n}\n\n*/\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "f3cf11fb9c5f9e72",
        "type": "debug",
        "z": "4011939e64afe1b1",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 200,
        "wires": []
    },
    {
        "id": "2f148c3941ac45fc",
        "type": "mongodb3 in",
        "z": "4011939e64afe1b1",
        "service": "_ext_",
        "configNode": "e6a61ad9a248f9f5",
        "name": "Database all out",
        "collection": "sensordatas",
        "operation": "find.toArray",
        "x": 680,
        "y": 1180,
        "wires": [
            [
                "aff19ec85bf709e4"
            ]
        ]
    },
    {
        "id": "1bf5af5f49df9a72",
        "type": "http response",
        "z": "4011939e64afe1b1",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1470,
        "y": 1180,
        "wires": []
    },
    {
        "id": "fa7ee4d0885f4183",
        "type": "tableify",
        "z": "4011939e64afe1b1",
        "name": "",
        "before": " yoyo salemou alaykom",
        "after": "beselemou aalaykom",
        "tableStyle": "",
        "theadStyle": "",
        "tbodyStyle": "",
        "trStyle": "",
        "tdStyle": "",
        "x": 1280,
        "y": 1180,
        "wires": [
            [
                "1bf5af5f49df9a72"
            ]
        ]
    },
    {
        "id": "15fa69488834f701",
        "type": "http in",
        "z": "4011939e64afe1b1",
        "name": "get",
        "url": "/historic",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 470,
        "y": 1180,
        "wires": [
            [
                "2f148c3941ac45fc"
            ]
        ]
    },
    {
        "id": "579135c05cadafe7",
        "type": "comment",
        "z": "4011939e64afe1b1",
        "name": "Stock Data in Database",
        "info": "",
        "x": 920,
        "y": 140,
        "wires": []
    },
    {
        "id": "d3b70774098a21a3",
        "type": "comment",
        "z": "4011939e64afe1b1",
        "name": "Realtime Data in Node-red Dashboard",
        "info": "",
        "x": 1070,
        "y": 460,
        "wires": []
    },
    {
        "id": "09c52b7a9940e21d",
        "type": "function",
        "z": "4011939e64afe1b1",
        "name": "Extract temperature",
        "func": "// Extract temperature from the JSON message\nvar temperature = msg.payload.temperature;\n\n\n\n// Set temperature value to msg.payload\nmsg.payload = temperature;\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 520,
        "wires": [
            [
                "c26df9a27a8c48d5"
            ]
        ]
    },
    {
        "id": "c26df9a27a8c48d5",
        "type": "ui_gauge",
        "z": "4011939e64afe1b1",
        "name": "Temperature",
        "group": "fd063ac6698cc46f",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature",
        "label": " °C",
        "format": "{{value}} °C",
        "min": 0,
        "max": "40",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "10",
        "seg2": "20",
        "diff": false,
        "className": "",
        "x": 1350,
        "y": 520,
        "wires": []
    },
    {
        "id": "f9cc2511b9174424",
        "type": "ui_gauge",
        "z": "4011939e64afe1b1",
        "name": "Pressure",
        "group": "fd063ac6698cc46f",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Pressure",
        "label": "Pa",
        "format": "{{value}}",
        "min": 0,
        "max": "200000",
        "colors": [
            "#00b500",
            "#69694f",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1360,
        "y": 560,
        "wires": []
    },
    {
        "id": "24a2a7fadf3df587",
        "type": "function",
        "z": "4011939e64afe1b1",
        "name": "Extract pressure",
        "func": "// Extract temperature from the JSON message\nvar pressure = msg.payload.pressure;\n\n// Set temperature value to msg.payload\nmsg.payload = pressure;\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 560,
        "wires": [
            [
                "f9cc2511b9174424"
            ]
        ]
    },
    {
        "id": "b456c8b35b17e6b0",
        "type": "function",
        "z": "4011939e64afe1b1",
        "name": "Remove id",
        "func": "\nvar  numberOfObjects = Object.keys(msg.payload).length;\nfor (let i = 0; i < numberOfObjects; i++) {\n\n delete msg.payload[i]['_id'];\n\n}\n\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "2238915295c41ba3",
        "type": "ui_text",
        "z": "4011939e64afe1b1",
        "group": "fd063ac6698cc46f",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Time",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1370,
        "y": 600,
        "wires": []
    },
    {
        "id": "aff19ec85bf709e4",
        "type": "function",
        "z": "4011939e64afe1b1",
        "name": "Remove id and Convert Time",
        "func": "\nvar formattedTime;\nvar  numberOfObjects = Object.keys(msg.payload).length;\n\nfor (let i = 0; i < numberOfObjects; i++) {\n\n delete msg.payload[i]['_id'];\n // Extract time from the JSON message and convert it to a formatted string\n formattedTime = new Date(msg.payload[i]['time']).toLocaleString();\n\n // Set the formatted time value to msg.payload\n  msg.payload[i]['time'] = formattedTime;\n\n}\n\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1180,
        "wires": [
            [
                "fa7ee4d0885f4183"
            ]
        ]
    },
    {
        "id": "091426fc05364cec",
        "type": "comment",
        "z": "4011939e64afe1b1",
        "name": "Extract Data from DB with http get request and display it in a html table",
        "info": "",
        "x": 990,
        "y": 1120,
        "wires": []
    },
    {
        "id": "bf56e781cda39fa3",
        "type": "node-red-contrib-whatsapp-cmb-send-message",
        "z": "4011939e64afe1b1",
        "name": "",
        "credtype": "account",
        "account": "c71771c6b6ce37e4",
        "text": "payload",
        "phonenumbervalue": "",
        "apikeyvalue": "",
        "apikeyinputtypemessage": "msg",
        "phonenumberinputtypemessage": "msg",
        "inputtypemessage": "msg",
        "rejectssl": false,
        "x": 1360,
        "y": 360,
        "wires": [
            [
                "3d4201cd71721d2b"
            ]
        ]
    },
    {
        "id": "82ea814a6be4b884",
        "type": "function",
        "z": "4011939e64afe1b1",
        "name": "Convert Json to String",
        "func": "// Check if the message has a payload\nif (msg.payload) {\n    // Create a custom message\n    var customMessage = \"Alert! \";\n\n    // Check for temperature and pressure in the payload\n    if (msg.payload.temperature !== undefined) {\n        customMessage += \"Temperature: \" + msg.payload.temperature + \"°C. \";\n    }\n\n    if (msg.payload.pressure !== undefined) {\n        customMessage += \"Pressure: \" + msg.payload.pressure + \" Pa. \";\n    }\n\n    if (msg.payload.time !== undefined) {\n        customMessage += \"Time: \" + msg.payload.time + \".\";\n    }\n\n    // Set the custom message as the payload and convert to string\n    msg.payload = customMessage;\n    return msg;\n} else {\n    // No payload, do not send the message\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 360,
        "wires": [
            [
                "bf56e781cda39fa3"
            ]
        ]
    },
    {
        "id": "412f4d71128b5c06",
        "type": "function",
        "z": "4011939e64afe1b1",
        "name": "IF",
        "func": "var temperature = msg.payload.temperature;\nvar pressure = msg.payload.pressure;\nvar date = msg.payload.date;\nvar time = msg.payload.time;\n\n// Combine date and time strings into a single string in ISO format\nvar isoDateTime = date.replace(/\\//g, '-') + 'T' + time + '+01:00'; // Adjusted for CET (UTC+1)\nvar formattedTime = new Date(isoDateTime).toLocaleString('en-US', { timeZone: 'Africa/Tunis' });\n\nvar newPayload = {};\nvar conditionMet = false;\n\nif (temperature > 40) {\n    newPayload.temperature = temperature;\n    conditionMet = true;\n}\n\nif (pressure > 115584) {\n    newPayload.pressure = pressure;\n    conditionMet = true;\n}\n\nif (conditionMet) {\n    newPayload.time = formattedTime;\n    msg.payload = newPayload;\n    return msg;\n} else {\n    return null;  // Do not send the message if no condition is met\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 360,
        "wires": [
            [
                "82ea814a6be4b884"
            ]
        ]
    },
    {
        "id": "3d4201cd71721d2b",
        "type": "debug",
        "z": "4011939e64afe1b1",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 360,
        "wires": []
    },
    {
        "id": "548b794e4e80eace",
        "type": "http request",
        "z": "4011939e64afe1b1",
        "name": "HTTP POST",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:3001/api/realtime",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 790,
        "y": 840,
        "wires": [
            [
                "460ea87d68834633"
            ]
        ]
    },
    {
        "id": "460ea87d68834633",
        "type": "debug",
        "z": "4011939e64afe1b1",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 840,
        "wires": []
    },
    {
        "id": "ee9343f05b8994ea",
        "type": "function",
        "z": "4011939e64afe1b1",
        "name": "Add Date and Time",
        "func": "/*\nconst data = msg.payload;\n\nconst now = new Date();\ndata.date = now.toISOString().split('T')[0]; // YYYY-MM-DD format\nconst time = now.toTimeString().split(' ')[0]; // HH:MM:SS format\n\ndata.time = time; // Add time field\n\nmsg.payload = data;\nreturn msg;\n*/\nconst data = msg.payload;\n\nconst now = new Date();\nconst year = now.getFullYear();\nconst month = String(now.getMonth() + 1).padStart(2, '0'); // Months are 0-based\nconst day = String(now.getDate()).padStart(2, '0');\ndata.date = `${year}/${month}/${day}`; // YYYY/MM/DD format\nconst time = now.toTimeString().split(' ')[0]; // HH:MM:SS format\n\ndata.time = time; // Add time field\n\nmsg.payload = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 340,
        "wires": [
            [
                "09c52b7a9940e21d",
                "24a2a7fadf3df587",
                "412f4d71128b5c06",
                "548b794e4e80eace",
                "9ed4077df27a955d"
            ]
        ]
    },
    {
        "id": "6e9953aa219f4bda",
        "type": "comment",
        "z": "4011939e64afe1b1",
        "name": "ALERT",
        "info": "",
        "x": 1110,
        "y": 280,
        "wires": []
    },
    {
        "id": "837f7f07ba15cafc",
        "type": "comment",
        "z": "4011939e64afe1b1",
        "name": "Realtime Data in MERN Dashboard",
        "info": "",
        "x": 920,
        "y": 760,
        "wires": []
    },
    {
        "id": "98b13a66e5e73b25",
        "type": "inject",
        "z": "4011939e64afe1b1",
        "name": "Full Test json inject",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"date\":\"2024/06/02\",\"time\":\"22:41:21\",\"temperature\":16,\"pressure\":100000}",
        "payloadType": "json",
        "x": 170,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "96b180fb810ba6d3",
        "type": "inject",
        "z": "4011939e64afe1b1",
        "name": "Test json inject without Date/Time",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"temperature\":23,\"pressure\":112512}",
        "payloadType": "json",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "ee9343f05b8994ea"
            ]
        ]
    },
    {
        "id": "cdbaba12567d5cbc",
        "type": "debug",
        "z": "4011939e64afe1b1",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 440,
        "wires": []
    },
    {
        "id": "a9e0a812dcaf4188",
        "type": "comment",
        "z": "4011939e64afe1b1",
        "name": "Subscribe To MQTT Broker",
        "info": "",
        "x": 170,
        "y": 260,
        "wires": []
    },
    {
        "id": "3fd40cd2456f2618",
        "type": "function",
        "z": "4011939e64afe1b1",
        "name": "Convert Time",
        "func": "var date = msg.payload.date;\nvar time = msg.payload.time;\n\n// Combine date and time strings into a single string in ISO format\nvar isoDateTime = date + 'T' + time;\nvar formattedTime = new Date(isoDateTime).toLocaleString();\n\n// Set the formatted time value to msg.payload\nmsg.payload = formattedTime;\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 600,
        "wires": [
            [
                "2238915295c41ba3"
            ]
        ]
    },
    {
        "id": "c03f23d3a3247e6f",
        "type": "function",
        "z": "4011939e64afe1b1",
        "name": "Time Format for NR Dashboard",
        "func": "const data = msg.payload;\n\nconst now = new Date();\ndata.date = now.toISOString().split('T')[0]; // YYYY-MM-DD format\nconst time = now.toTimeString().split(' ')[0]; // HH:MM:SS format\n\ndata.time = time; // Add time field\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 600,
        "wires": [
            [
                "3fd40cd2456f2618"
            ]
        ]
    }
]